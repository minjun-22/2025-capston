{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOXP6O6zsw4RQImuP5ywBFs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/minjun-22/2025-capston/blob/main/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B3%BC%EC%A0%9C\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Wh4-KSG4BCqh",
        "outputId": "60865241-f30a-4586-a835-fe55a405d6d2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ea2ace36-c32d-49e2-b061-ff6586c71657\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ea2ace36-c32d-49e2-b061-ff6586c71657\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 서울일자리포털_인재정보_직종별,지역별_목록_20250325.csv to 서울일자리포털_인재정보_직종별,지역별_목록_20250325 (1).csv\n",
            "데이터프레임 정보:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3683 entries, 0 to 3682\n",
            "Data columns (total 23 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   JBHNT_REQST_NO                3683 non-null   object \n",
            " 1   SEX                           3683 non-null   object \n",
            " 2   AGE                           3683 non-null   int64  \n",
            " 3   ACDMCR_CMMN_CODE_SE           3683 non-null   object \n",
            " 4   ACDMCR_CMMN_CODE_NM           3683 non-null   object \n",
            " 5   WORK_AREA_CMMN_CODE_SE_1_1    3522 non-null   object \n",
            " 6   WORK_AREA_CMMN_CODE_SE_1_2    3280 non-null   object \n",
            " 7   WORK_AREA_CMMN_CODE_SE_2_1    2989 non-null   object \n",
            " 8   WORK_AREA_CMMN_CODE_SE_2_2    1366 non-null   object \n",
            " 9   HOPE_JSSFC_CMMN_CODE_SE_1     3683 non-null   int64  \n",
            " 10  HOPE_JSSFC_CMMN_CODE_SE_NM_1  3683 non-null   object \n",
            " 11  HOPE_JSSFC_CAREER_YY_CO_1     1683 non-null   float64\n",
            " 12  HOPE_JSSFC_CAREER_MONTH_CO_1  1683 non-null   float64\n",
            " 13  HOPE_JSSFC_CAREER_YY_MM       3683 non-null   object \n",
            " 14  JBHNT_CRTFC_STTUS_CMMN_SE     3683 non-null   object \n",
            " 15  JBHNT_CRTFC_STTUS_CMMN_SE_NM  3683 non-null   object \n",
            " 16  SEARCH_KWRD_1                 299 non-null    object \n",
            " 17  SEARCH_KWRD_2                 201 non-null    object \n",
            " 18  SEARCH_KWRD_3                 121 non-null    object \n",
            " 19  SEARCH_KWRD_4                 63 non-null     object \n",
            " 20  SEARCH_KWRD_5                 24 non-null     object \n",
            " 21  REGIST_DT_HM                  3683 non-null   object \n",
            " 22  UPDT_DT_HM                    3683 non-null   object \n",
            "dtypes: float64(2), int64(2), object(19)\n",
            "memory usage: 661.9+ KB\n",
            "\n",
            "데이터 샘플:\n",
            "     JBHNT_REQST_NO SEX  AGE ACDMCR_CMMN_CODE_SE ACDMCR_CMMN_CODE_NM  \\\n",
            "0  H103202409302766   여   67              J00106                고등학교   \n",
            "1  H103202409302619   남   65              J00110              대학_대학교   \n",
            "2  H103202409302613   여   62              J00106                고등학교   \n",
            "3  H103202409302600   여   57              J00108                전문대학   \n",
            "4  H103202409302599   여   64              J00106                고등학교   \n",
            "\n",
            "  WORK_AREA_CMMN_CODE_SE_1_1 WORK_AREA_CMMN_CODE_SE_1_2  \\\n",
            "0                         서울                        강서구   \n",
            "1                         경기                        김포시   \n",
            "2                         서울                        강서구   \n",
            "3                         서울                        강서구   \n",
            "4                         서울                        NaN   \n",
            "\n",
            "  WORK_AREA_CMMN_CODE_SE_2_1 WORK_AREA_CMMN_CODE_SE_2_2  \\\n",
            "0                         서울                        NaN   \n",
            "1                        NaN                        NaN   \n",
            "2                         서울                        NaN   \n",
            "3                         서울                        NaN   \n",
            "4                        NaN                        NaN   \n",
            "\n",
            "   HOPE_JSSFC_CMMN_CODE_SE_1  ... HOPE_JSSFC_CAREER_YY_MM  \\\n",
            "0                     550200  ...                   10년0월   \n",
            "1                     542000  ...                      신입   \n",
            "2                     232100  ...                   10년0월   \n",
            "3                      29900  ...                      신입   \n",
            "4                     215301  ...                   10년0월   \n",
            "\n",
            "   JBHNT_CRTFC_STTUS_CMMN_SE  JBHNT_CRTFC_STTUS_CMMN_SE_NM SEARCH_KWRD_1  \\\n",
            "0                     J03402                            승인           NaN   \n",
            "1                     J03402                            승인           NaN   \n",
            "2                     J03402                            승인           NaN   \n",
            "3                     J03402                            승인           NaN   \n",
            "4                     J03402                            승인           NaN   \n",
            "\n",
            "  SEARCH_KWRD_2 SEARCH_KWRD_3 SEARCH_KWRD_4 SEARCH_KWRD_5  \\\n",
            "0           NaN           NaN           NaN           NaN   \n",
            "1           NaN           NaN           NaN           NaN   \n",
            "2           NaN           NaN           NaN           NaN   \n",
            "3           NaN           NaN           NaN           NaN   \n",
            "4           NaN           NaN           NaN           NaN   \n",
            "\n",
            "              REGIST_DT_HM               UPDT_DT_HM  \n",
            "0  2024-09-30 23:01:05.000  2024-09-30 23:01:09.000  \n",
            "1  2024-09-30 20:30:10.000  2024-09-30 20:30:16.000  \n",
            "2  2024-09-30 20:22:36.000  2024-09-30 20:22:42.000  \n",
            "3  2024-09-30 20:20:53.000  2024-09-30 20:21:09.000  \n",
            "4  2024-09-30 20:18:28.000  2024-09-30 20:18:33.000  \n",
            "\n",
            "[5 rows x 23 columns]\n",
            "\n",
            "기본 통계 요약:\n",
            "          JBHNT_REQST_NO   SEX          AGE ACDMCR_CMMN_CODE_SE  \\\n",
            "count               3683  3683  3683.000000                3683   \n",
            "unique              3683     2          NaN                   9   \n",
            "top     H304201406200533     남          NaN              J00106   \n",
            "freq                   1  2480          NaN                1320   \n",
            "mean                 NaN   NaN    67.591366                 NaN   \n",
            "std                  NaN   NaN     6.329106                 NaN   \n",
            "min                  NaN   NaN    17.000000                 NaN   \n",
            "25%                  NaN   NaN    64.000000                 NaN   \n",
            "50%                  NaN   NaN    68.000000                 NaN   \n",
            "75%                  NaN   NaN    72.000000                 NaN   \n",
            "max                  NaN   NaN    88.000000                 NaN   \n",
            "\n",
            "       ACDMCR_CMMN_CODE_NM WORK_AREA_CMMN_CODE_SE_1_1  \\\n",
            "count                 3683                       3522   \n",
            "unique                   9                          4   \n",
            "top                   고등학교                         서울   \n",
            "freq                  1320                       3485   \n",
            "mean                   NaN                        NaN   \n",
            "std                    NaN                        NaN   \n",
            "min                    NaN                        NaN   \n",
            "25%                    NaN                        NaN   \n",
            "50%                    NaN                        NaN   \n",
            "75%                    NaN                        NaN   \n",
            "max                    NaN                        NaN   \n",
            "\n",
            "       WORK_AREA_CMMN_CODE_SE_1_2 WORK_AREA_CMMN_CODE_SE_2_1  \\\n",
            "count                        3280                       2989   \n",
            "unique                         40                          6   \n",
            "top                           강서구                         서울   \n",
            "freq                          257                       2846   \n",
            "mean                          NaN                        NaN   \n",
            "std                           NaN                        NaN   \n",
            "min                           NaN                        NaN   \n",
            "25%                           NaN                        NaN   \n",
            "50%                           NaN                        NaN   \n",
            "75%                           NaN                        NaN   \n",
            "max                           NaN                        NaN   \n",
            "\n",
            "       WORK_AREA_CMMN_CODE_SE_2_2  HOPE_JSSFC_CMMN_CODE_SE_1  ...  \\\n",
            "count                        1366                3683.000000  ...   \n",
            "unique                         42                        NaN  ...   \n",
            "top                           강남구                        NaN  ...   \n",
            "freq                          120                        NaN  ...   \n",
            "mean                          NaN              519096.143904  ...   \n",
            "std                           NaN              156796.248721  ...   \n",
            "min                           NaN               12202.000000  ...   \n",
            "25%                           NaN              542000.000000  ...   \n",
            "50%                           NaN              550104.000000  ...   \n",
            "75%                           NaN              561101.000000  ...   \n",
            "max                           NaN              905002.000000  ...   \n",
            "\n",
            "       HOPE_JSSFC_CAREER_YY_MM  JBHNT_CRTFC_STTUS_CMMN_SE  \\\n",
            "count                     3683                       3683   \n",
            "unique                     154                          3   \n",
            "top                         신입                     J03404   \n",
            "freq                      2031                       1818   \n",
            "mean                       NaN                        NaN   \n",
            "std                        NaN                        NaN   \n",
            "min                        NaN                        NaN   \n",
            "25%                        NaN                        NaN   \n",
            "50%                        NaN                        NaN   \n",
            "75%                        NaN                        NaN   \n",
            "max                        NaN                        NaN   \n",
            "\n",
            "        JBHNT_CRTFC_STTUS_CMMN_SE_NM SEARCH_KWRD_1 SEARCH_KWRD_2  \\\n",
            "count                           3683           299           201   \n",
            "unique                             3           178           144   \n",
            "top                               알선            경비            미화   \n",
            "freq                            1818            27             8   \n",
            "mean                             NaN           NaN           NaN   \n",
            "std                              NaN           NaN           NaN   \n",
            "min                              NaN           NaN           NaN   \n",
            "25%                              NaN           NaN           NaN   \n",
            "50%                              NaN           NaN           NaN   \n",
            "75%                              NaN           NaN           NaN   \n",
            "max                              NaN           NaN           NaN   \n",
            "\n",
            "       SEARCH_KWRD_3 SEARCH_KWRD_4 SEARCH_KWRD_5             REGIST_DT_HM  \\\n",
            "count            121            63            24                     3683   \n",
            "unique           103            57            23                     3678   \n",
            "top               청소            관리          동대문구  2024-08-23 15:49:01.000   \n",
            "freq               5             4             2                        2   \n",
            "mean             NaN           NaN           NaN                      NaN   \n",
            "std              NaN           NaN           NaN                      NaN   \n",
            "min              NaN           NaN           NaN                      NaN   \n",
            "25%              NaN           NaN           NaN                      NaN   \n",
            "50%              NaN           NaN           NaN                      NaN   \n",
            "75%              NaN           NaN           NaN                      NaN   \n",
            "max              NaN           NaN           NaN                      NaN   \n",
            "\n",
            "                     UPDT_DT_HM  \n",
            "count                      3683  \n",
            "unique                     3682  \n",
            "top     2024-04-04 15:07:15.000  \n",
            "freq                          2  \n",
            "mean                        NaN  \n",
            "std                         NaN  \n",
            "min                         NaN  \n",
            "25%                         NaN  \n",
            "50%                         NaN  \n",
            "75%                         NaN  \n",
            "max                         NaN  \n",
            "\n",
            "[11 rows x 23 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Google Colab 환경에서 파일을 업로드하는 코드\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n",
        "# 파일명 가져오기\n",
        "file_name = list(uploaded.keys())[0]\n",
        "\n",
        "# 데이터 읽기 (euc-kr 인코딩 사용)\n",
        "df = pd.read_csv(file_name, encoding='euc-kr')\n",
        "\n",
        "# 데이터 기본 정보 출력\n",
        "print(\"데이터프레임 정보:\")\n",
        "df.info()\n",
        "print(\"\\n데이터 샘플:\")\n",
        "print(df.head())\n",
        "\n",
        "# 기본 통계 요약\n",
        "print(\"\\n기본 통계 요약:\")\n",
        "print(df.describe(include='all'))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pwf7RBhFCdtl",
        "outputId": "48351bae-811c-4524-cbfd-552868486a0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['JBHNT_REQST_NO', 'SEX', 'AGE', 'ACDMCR_CMMN_CODE_SE',\n",
            "       'ACDMCR_CMMN_CODE_NM', 'WORK_AREA_CMMN_CODE_SE_1_1',\n",
            "       'WORK_AREA_CMMN_CODE_SE_1_2', 'WORK_AREA_CMMN_CODE_SE_2_1',\n",
            "       'WORK_AREA_CMMN_CODE_SE_2_2', 'HOPE_JSSFC_CMMN_CODE_SE_1',\n",
            "       'HOPE_JSSFC_CMMN_CODE_SE_NM_1', 'HOPE_JSSFC_CAREER_YY_CO_1',\n",
            "       'HOPE_JSSFC_CAREER_MONTH_CO_1', 'HOPE_JSSFC_CAREER_YY_MM',\n",
            "       'JBHNT_CRTFC_STTUS_CMMN_SE', 'JBHNT_CRTFC_STTUS_CMMN_SE_NM',\n",
            "       'SEARCH_KWRD_1', 'SEARCH_KWRD_2', 'SEARCH_KWRD_3', 'SEARCH_KWRD_4',\n",
            "       'SEARCH_KWRD_5', 'REGIST_DT_HM', 'UPDT_DT_HM'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 연령대 분석 (예제: 연령 컬럼이 'age'라고 가정)\n",
        "if 'AGE' in df.columns:\n",
        "    bins = [0, 20, 30, 40, 50, 60, 100]  # 연령 구간\n",
        "    labels = ['10대 이하', '20대', '30대', '40대', '50대', '60대 이상']\n",
        "    df['연령대'] = pd.cut(df['AGE'], bins=bins, labels=labels, right=False)\n",
        "\n",
        "    print(\"\\n연령대 분포:\")\n",
        "    print(df['연령대'].value_counts())\n",
        "\n",
        "    print(\"\\n연령대별 평균 값:\")\n",
        "    print(df.groupby('연령대').mean(numeric_only=True))\n",
        "else:\n",
        "    print(\"\\n데이터에 'AGE' 컬럼이 없습니다. 컬럼명을 확인해주세요.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eSPSax8-Bxb5",
        "outputId": "ccd7b764-c419-4d4d-c088-32fca76823bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "연령대 분포:\n",
            "연령대\n",
            "60대 이상    3366\n",
            "50대        303\n",
            "10대 이하       8\n",
            "40대          6\n",
            "20대          0\n",
            "30대          0\n",
            "Name: count, dtype: int64\n",
            "\n",
            "연령대별 평균 값:\n",
            "              AGE  HOPE_JSSFC_CMMN_CODE_SE_1  HOPE_JSSFC_CAREER_YY_CO_1  \\\n",
            "연령대                                                                       \n",
            "10대 이하  17.750000              389713.375000                   0.000000   \n",
            "20대           NaN                        NaN                        NaN   \n",
            "30대           NaN                        NaN                        NaN   \n",
            "40대     45.000000              485734.666667                        NaN   \n",
            "50대     57.405941              492770.663366                  10.435185   \n",
            "60대 이상  68.666964              521832.879382                  10.028681   \n",
            "\n",
            "        HOPE_JSSFC_CAREER_MONTH_CO_1  \n",
            "연령대                                   \n",
            "10대 이하                      0.000000  \n",
            "20대                              NaN  \n",
            "30대                              NaN  \n",
            "40대                              NaN  \n",
            "50대                         1.101852  \n",
            "60대 이상                      0.879541  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-8d3cae23c736>:11: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  print(df.groupby('연령대').mean(numeric_only=True))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#지역 분석\n",
        "if 'WORK_AREA_CMMN_CODE_SE_1_1' in df.columns:\n",
        "    print(\"\\n근무 지역 코드 분포:\")\n",
        "    print(df['WORK_AREA_CMMN_CODE_SE_1_1'].value_counts())\n",
        "\n",
        "    print(\"\\n근무 지역 코드별 평균 값:\")\n",
        "    print(df.groupby('WORK_AREA_CMMN_CODE_SE_1_1').mean(numeric_only=True))\n",
        "else:\n",
        "    print(\"\\n데이터에 'WORK_AREA_CMMN_CODE_SE_1_1' 컬럼이 없습니다. 컬럼명을 확인해주세요.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FmLB88mJCyWe",
        "outputId": "fe0d7eb4-8f85-4be0-fade-4cf52ea2b086"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "근무 지역 코드 분포:\n",
            "WORK_AREA_CMMN_CODE_SE_1_1\n",
            "서울    3485\n",
            "경기      33\n",
            "인천       3\n",
            "광주       1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "근무 지역 코드별 평균 값:\n",
            "                                  AGE  HOPE_JSSFC_CMMN_CODE_SE_1  \\\n",
            "WORK_AREA_CMMN_CODE_SE_1_1                                         \n",
            "경기                          65.212121              491783.333333   \n",
            "광주                          64.000000              542002.000000   \n",
            "서울                          67.610904              520139.705022   \n",
            "인천                          65.000000              544703.000000   \n",
            "\n",
            "                            HOPE_JSSFC_CAREER_YY_CO_1  \\\n",
            "WORK_AREA_CMMN_CODE_SE_1_1                              \n",
            "경기                                            9.00000   \n",
            "광주                                            0.00000   \n",
            "서울                                            9.89248   \n",
            "인천                                            3.00000   \n",
            "\n",
            "                            HOPE_JSSFC_CAREER_MONTH_CO_1  \n",
            "WORK_AREA_CMMN_CODE_SE_1_1                                \n",
            "경기                                              1.111111  \n",
            "광주                                              0.000000  \n",
            "서울                                              0.891858  \n",
            "인천                                              0.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 성별 분석 (예제: 성별 컬럼이 'SEX'라고 가정)\n",
        "if 'SEX' in df.columns:\n",
        "    print(\"\\n성별 분포:\")\n",
        "    print(df['SEX'].value_counts(normalize=True)*100)\n",
        "\n",
        "    print(\"\\n성별별 평균 값:\")\n",
        "    print(df.groupby('SEX').mean(numeric_only=True))\n",
        "else:\n",
        "    print(\"\\n데이터에 'SEX' 컬럼이 없습니다. 컬럼명을 확인해주세요.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s_L4DS-_DJef",
        "outputId": "e43d9d88-3137-4e86-d320-dca89b64ade4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "성별 분포:\n",
            "SEX\n",
            "남    67.336411\n",
            "여    32.663589\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "성별별 평균 값:\n",
            "           AGE  HOPE_JSSFC_CMMN_CODE_SE_1  HOPE_JSSFC_CAREER_YY_CO_1  \\\n",
            "SEX                                                                    \n",
            "남    67.931048              531300.112097                  11.151405   \n",
            "여    66.891106              493937.506234                   7.865517   \n",
            "\n",
            "     HOPE_JSSFC_CAREER_MONTH_CO_1  \n",
            "SEX                                \n",
            "남                        0.969175  \n",
            "여                        0.741379  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ACDMCR_CMMN_CODE_NM 분류 분석\n",
        "if 'ACDMCR_CMMN_CODE_NM' in df.columns:\n",
        "    print(\"\\n학력 코드 분포:\")\n",
        "    print(df['ACDMCR_CMMN_CODE_NM'].value_counts(normalize=True)*100)\n",
        "\n",
        "    print(\"\\n학력 코드별 평균 값:\")\n",
        "    print(df.groupby('ACDMCR_CMMN_CODE_NM').mean(numeric_only=True))\n",
        "else:\n",
        "    print(\"\\n데이터에 'ACDMCR_CMMN_CODE_NM' 컬럼이 없습니다. 컬럼명을 확인해주세요.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OfKwrRrsDW6w",
        "outputId": "3eee65f5-9de2-4e14-8b3d-10480f2184d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "학력 코드 분포:\n",
            "ACDMCR_CMMN_CODE_NM\n",
            "고등학교      35.840348\n",
            "중학교       17.051317\n",
            "대학_대학교    14.987782\n",
            "관계없음      12.924247\n",
            "초등학교       9.367364\n",
            "무학력        3.719794\n",
            "전문대학       3.665490\n",
            "석사과정       2.117839\n",
            "박사과정       0.325821\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "학력 코드별 평균 값:\n",
            "                           AGE  HOPE_JSSFC_CMMN_CODE_SE_1  \\\n",
            "ACDMCR_CMMN_CODE_NM                                         \n",
            "고등학교                 67.134091              531505.987879   \n",
            "관계없음                 67.292017              509059.584034   \n",
            "대학_대학교               66.099638              445212.094203   \n",
            "무학력                  70.642336              565719.408759   \n",
            "박사과정                 65.666667              362717.500000   \n",
            "석사과정                 65.756410              397828.641026   \n",
            "전문대학                 64.800000              500582.733333   \n",
            "중학교                  68.710191              560648.106688   \n",
            "초등학교                 70.466667              549626.878261   \n",
            "\n",
            "                     HOPE_JSSFC_CAREER_YY_CO_1  HOPE_JSSFC_CAREER_MONTH_CO_1  \n",
            "ACDMCR_CMMN_CODE_NM                                                           \n",
            "고등학교                                  9.543210                      0.841049  \n",
            "관계없음                                 10.991935                      0.500000  \n",
            "대학_대학교                               11.397321                      1.281250  \n",
            "무학력                                   8.571429                      0.464286  \n",
            "박사과정                                 12.666667                      3.333333  \n",
            "석사과정                                 15.869565                      1.521739  \n",
            "전문대학                                  9.117647                      1.647059  \n",
            "중학교                                   9.898630                      0.884932  \n",
            "초등학교                                  9.529101                      0.671958  \n"
          ]
        }
      ]
    }
  ]
}